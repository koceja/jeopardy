{"version":3,"sources":["components/apiInfo/index.js","components/Random/index.js","components/Navigation/index.js","constants/routes.js","components/App/index.js","serviceWorker.js","index.js"],"names":["App","id","action","type","value","React","Component","Search","state","showResults","reveal","question","this","props","dangerouslySetInnerHTML","__html","fetchDataInitial","axios","get","then","response","setState","data","catch","error","console","log","fetchDataSecond","dataNext","fetchSet","next","fetcher","fetchData","answer","revealed","category","categoryTitle","title","Button","variant","onClick","size","style","width","Navigation","handleChange","event","AppBar","position","Tabs","onChange","centered","Tab","component","Link","to","label","basename","exact","path","RandomPage","APIPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f93b8314.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./index.css\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id=\"container\">\r\n        <div id=\"middle\">\r\n          <h2>JService.io</h2>\r\n          <p>\r\n            This webapp was created using the JService.io API. You can find the\r\n            API here.\r\n          </p>\r\n          <form action=\"http://jservice.io/\">\r\n            <input type=\"submit\" value=\"Go to JService.io\" />\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport axios from 'axios';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Search extends React.Component {\r\n  state = {\r\n    showResults: false,\r\n    reveal: false,\r\n  }\r\n\r\n  render() {\r\n    const { question } = this.props\r\n      return (\r\n          <div dangerouslySetInnerHTML={{__html: question}} >\r\n          </div>\r\n      );\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [{question: \"Loading...\"}],\r\n      reveal: false\r\n    };\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.fetchDataInitial()\r\n    this.fetchDataSecond()\r\n  }\r\n\r\n  fetchDataInitial = () => {\r\n    axios.get('https://cors-anywhere.herokuapp.com/http://jservice.io/api/random/')\r\n    .then(response => {\r\n      this.setState({ data: response.data });\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  fetchDataSecond = () => {\r\n    axios.get('https://cors-anywhere.herokuapp.com/http://jservice.io/api/random/')\r\n    .then(response => {\r\n      this.setState({ dataNext: response.data });\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n\r\n  fetchSet = () => {\r\n    const next = this.state.dataNext\r\n    this.setState({ data: next })\r\n    this.fetcher()\r\n  }\r\n\r\n  fetcher = () => {\r\n    this.fetchData()\r\n    const { dataNext } = this.state\r\n    if (dataNext[0].question === \"\" || dataNext[0].answer === \"\"){\r\n      this.fetchData()\r\n    }\r\n  }\r\n\r\n  fetchData = () => {\r\n    axios.get('https://cors-anywhere.herokuapp.com/http://jservice.io/api/random/')\r\n    .then(response => {\r\n      this.setState({ dataNext: response.data });\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  reveal() {\r\n    const { data } = this.state\r\n\r\n    if (typeof(data[0]) === 'undefined') {\r\n      this.setState({revealed: \"\"})\r\n    }\r\n    else{\r\n      if (this.state.reveal === false){\r\n        this.setState({revealed: data[0].answer})\r\n        this.setState({reveal: !this.state.reveal})\r\n      }\r\n      else{\r\n        this.setState({revealed: \"\"})\r\n        this.fetchSet()\r\n        this.setState({reveal: !this.state.reveal})\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state\r\n\r\n    if (typeof(data[0]) === 'undefined') {\r\n      return (\r\n        <p>Error</p>\r\n      )\r\n    }\r\n    else{\r\n      const { category } = data[0]\r\n      var categoryTitle = null;\r\n      if (typeof(category) == 'undefined') {\r\n        categoryTitle = \"Unknown\"\r\n      }\r\n      else{\r\n        categoryTitle = category.title\r\n      }\r\n      const answer = data[0].question\r\n      const value = data[0].value * 2\r\n      const {revealed} = this.state\r\n      return ( \r\n        <div id=\"container\">\r\n          <div id=\"inner\">\r\n            <div id=\"top\">\r\n              <div id=\"category\">\r\n                <p><strong>{ categoryTitle }</strong><br/>Value: { value }</p>\r\n              </div>\r\n            </div>\r\n            <div id=\"question\">\r\n              <h3><b>Answer</b></h3>\r\n              <p>{ answer }</p>\r\n            </div>\r\n            <div id=\"answer\">\r\n              <h3>Question</h3> \r\n              <Button variant=\"contained\" onClick={() => {this.reveal()}} size=\"small\" style={{ width: \"90%\"}}>\r\n                { (this.state.reveal) ? <p>Next Question</p> : <p>Reveal</p> }\r\n              </Button>\r\n              <p></p>\r\n              <Search question={revealed} />\r\n              <p></p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './index.css';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/typography\";\r\nimport Tabs from \"@material-ui/core/tabs\";\r\nimport Tab from \"@material-ui/core/tab\";\r\n\r\nimport * as ROUTES from '../../constants/routes';\r\n\r\nfunction TabContainer(props) {\r\n    return <Typography component=\"div\" style={{ padding: 8 * 3 }}>\r\n        {props.children}\r\n      </Typography>;\r\n}\r\n\r\nTabContainer.propTypes = {\r\n    children: PropTypes.node.isRequired\r\n}\r\n\r\nconst styles = theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n      backgroundColor: theme.palette.background.paper\r\n    }\r\n  });\r\n\r\nclass Navigation extends React.Component {\r\n    state = {\r\n        value: false\r\n      };\r\n    \r\n      handleChange = (event, value) => {\r\n        this.setState({ value });\r\n      };\r\n\r\n    render() {\r\n        const { value } = this.state\r\n        return(\r\n            <div id=\"navigation-bar\">\r\n                <AppBar position=\"static\">\r\n\r\n        <Tabs value={this.state.value} onChange={this.handleChange} centered>\r\n                \r\n                <Tab component={Link} to={ROUTES.RANDOM} label=\"Random\" />\r\n                <Tab component={Link} to={ROUTES.API} label=\"API\" />\r\n        </Tabs>\r\n        </AppBar>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navigation;\r\n\r\n/* <Tabs value={this.state.value} onChange={this.handleChange} indicatorColor=\"primary\" textColor=\"primary\" centered>\r\n          <Tab label=\"Item One\" />\r\n          <Tab label=\"Item Two\" />\r\n          <Tab label=\"Item Three\" />\r\n        </Tabs>\r\n\r\n<Link to={ROUTES.SEARCH} style={{ textDecoration: 'none', paddingRight: '3%' }}>\r\n            <Button variant=\"contained\" color=\"primary\">Search</Button>\r\n        </Link>\r\n        <Link to={ROUTES.GAMEBOARD} style={{ textDecoration: 'none', paddingRight: '3%' }}>\r\n            <Button variant=\"contained\" color=\"primary\" id=\"gameboard\">Gameboard</Button>\r\n        </Link>\r\n        <Link to={ROUTES.RANDOM} style={{ textDecoration: 'none', }}>\r\n            <Button variant=\"contained\" color=\"primary\">Random</Button>\r\n        </Link> */","export const API = '/apiInfo';\r\nexport const RANDOM = '/';\r\n","import React from 'react';\nimport { \n  BrowserRouter as Router,\n  Route,\n  HashRouter\n} from 'react-router-dom';\nimport './index.css'\n\n\nimport APIPage from '../apiInfo/index'\nimport RandomPage from '../Random/index'\nimport Navigation from '../Navigation/index'\n\n\nimport * as ROUTES from '../../constants/routes'\n\n\nclass App extends React.Component{\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div id=\"app\">\n          <Navigation />\n          <Route exact path={ROUTES.RANDOM} component={RandomPage} />\n          <Route exact path={ROUTES.API} component={APIPage} />\n        </div>\n      </HashRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/index';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}